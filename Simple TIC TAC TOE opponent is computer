import tkinter as tk
from tkinter import messagebox

class TicTacToeGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Tic Tac Toe")
        self.root.geometry("300x400")

        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        self.result_label = tk.Label(self.root, text='', font=('Arial', 14), fg='black', pady=10)
        self.player_turn = True

        self.create_board_buttons()
        self.create_reset_button()

        self.root.mainloop()

    def is_winner(self, player):
        for row in self.board:
            if all(cell == player for cell in row):
                return True

        for col in range(3):
            if all(self.board[row][col] == player for row in range(3)):
                return True

        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2 - i] == player for i in range(3)):
            return True

        return False

    def is_board_full(self):
        return all(cell != ' ' for row in self.board for cell in row)

    def get_empty_cells(self):
        return [(i, j) for i in range(3) for j in range(3) if self.board[i][j] == ' ']

    def minimax(self, depth, is_maximizing):
        if self.is_winner('X'):
            return -1
        elif self.is_winner('O'):
            return 1
        elif self.is_board_full():
            return 0

        if is_maximizing:
            max_eval = float('-inf')
            for i, j in self.get_empty_cells():
                self.board[i][j] = 'O'
                eval = self.minimax(depth + 1, False)
                self.board[i][j] = ' '
                max_eval = max(max_eval, eval)
            return max_eval
        else:
            min_eval = float('inf')
            for i, j in self.get_empty_cells():
                self.board[i][j] = 'X'
                eval = self.minimax(depth + 1, True)
                self.board[i][j] = ' '
                min_eval = min(min_eval, eval)
            return min_eval

    def get_best_move(self):
        best_val = float('-inf')
        best_move = None

        for i, j in self.get_empty_cells():
            self.board[i][j] = 'O'
            move_val = self.minimax(0, False)
            self.board[i][j] = ' '

            if move_val > best_val:
                best_move = (i, j)
                best_val = move_val

        return best_move

    def create_board_buttons(self):
        for i in range(3):
            for j in range(3):
                self.buttons[i][j] = tk.Button(
                    self.root, text='', font=('Arial', 20), width=5, height=2, command=lambda row=i, col=j: self.on_button_click(row, col))
                self.buttons[i][j].grid(row=i, column=j, padx=5, pady=5)

    def create_reset_button(self):
        reset_button = tk.Button(self.root, text='Reset Game', font=('Arial', 12), command=self.reset_game, bg='#4CAF50', fg='white')
        reset_button.grid(row=3, columnspan=3, pady=10)

    def on_button_click(self, row, col):
        if self.player_turn and self.board[row][col] == ' ':
            self.board[row][col] = 'X'
            self.buttons[row][col].config(text='X', state='disabled', bg='#3498db', fg='white')
            self.player_turn = False
            self.check_game_state()
            self.ai_move()

    def ai_move(self):
        if not self.player_turn:
            row, col = self.get_best_move()
            self.board[row][col] = 'O'
            self.buttons[row][col].config(text='O', state='disabled', bg='#e74c3c', fg='white')
            self.player_turn = True
            self.check_game_state()

    def check_game_state(self):
        if self.is_winner('X'):
            self.result_label.config(text="Congratulations! You win!", fg='#27ae60')
            self.result_label.grid(row=4, columnspan=3)
            self.disable_buttons()
        elif self.is_winner('O'):
            self.result_label.config(text="Oops! AI wins!", fg='#e74c3c')
            self.result_label.grid(row=4, columnspan=3)
            self.disable_buttons()
        elif self.is_board_full():
            self.result_label.config(text="It's a tie! The game ends in a draw.", fg='#3498db')
            self.result_label.grid(row=4, columnspan=3)
            self.disable_buttons()

    def disable_buttons(self):
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].config(state='disabled')

    def reset_game(self):
        self.result_label.config(text='')
        self.result_label.grid_forget()
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].config(text='', state='active', bg='SystemButtonFace', fg='black')
        self.player_turn = True

if __name__ == "__main__":
    TicTacToeGUI()
